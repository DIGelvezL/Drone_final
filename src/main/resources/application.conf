akka {

  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  //loggers = ["akka.event.slf4j.Slf4jLogger"]

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "DEBUG"

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  //stdout-loglevel = "DEBUG"

  # Filter of log events that is used by the LoggingAdapter before
  # publishing log events to the eventStream.
  //logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    //provider = "cluster"

    ThreadPool-dispatcher {
      type = Dispatcher
      # What kind of ExecutionService to use
      executor = "thread-pool-executor"
      # Configuration for the thread pool
      thread-pool-executor {
        # minimum number of threads to cap factor-based core number to
        core-pool-size-min = 2
        # No of core threads ... ceil(available processors * factor)
        core-pool-size-factor = 2.0
        # maximum number of threads to cap factor-based number to
        core-pool-size-max = 2
      }
      # Throughput defines the maximum number of messages to be
      # processed per actor before the thread jumps to the next actor.
      # Set to 1 for as fair as possible.
      throughput = 100
    }

    Task-task-dispatcher {
      type = TaskDispatcher
      # What kind of ExecutionService to use
      executor = "thread-pool-executor"
      # Configuration for the thread pool
      thread-pool-executor {
        # minimum number of threads to cap factor-based core number to
        core-pool-size-min = 2
        # No of core threads ... ceil(available processors * factor)
        core-pool-size-factor = 2.0
        # maximum number of threads to cap factor-based number to
        core-pool-size-max = 10
      }
      # Throughput defines the maximum number of messages to be
      # processed per actor before the thread jumps to the next actor.
      # Set to 1 for as fair as possible.
      throughput = 100
    }

    Pinned-dedicated-dispatcher {
      type = PinnedDispatcher
      # What kind of ExecutionService to use
      executor = "thread-pool-executor"
      # Configuration for the thread pool
      thread-pool-executor {
        # minimum number of threads to cap factor-based core number to
        core-pool-size-min = 2
        # No of core threads ... ceil(available processors * factor)
        core-pool-size-factor = 2.0
        # maximum number of threads to cap factor-based number to
        core-pool-size-max = 10
      }
    }

    Balancing-dispatcher {
      type = BalancingDispatcher
      # What kind of ExecutionService to use
      executor = "thread-pool-executor"
      # Configuration for the thread pool
      thread-pool-executor {
        # minimum number of threads to cap factor-based core number to
        core-pool-size-min = 2
        # No of core threads ... ceil(available processors * factor)
        core-pool-size-factor = 2.0
        # maximum number of threads to cap factor-based number to
        core-pool-size-max = 10
      }
      # Throughput defines the maximum number of messages to be
      # processed per actor before the thread jumps to the next actor.
      # Set to 1 for as fair as possible.
      throughput = 100
    }

    CallingThread-dispatcher {
      type = CallingThreadDispatcher
      # What kind of ExecutionService to use
      executor = "thread-pool-executor"
      # Configuration for the thread pool
      thread-pool-executor {
        # minimum number of threads to cap factor-based core number to
        core-pool-size-min = 2
        # No of core threads ... ceil(available processors * factor)
        core-pool-size-factor = 2.0
        # maximum number of threads to cap factor-based number to
        core-pool-size-max = 10
      }
      # Throughput defines the maximum number of messages to be
      # processed per actor before the thread jumps to the next actor.
      # Set to 1 for as fair as possible.
      throughput = 100
    }

    ForkJoin-fork-join-dispatcher {
      type = ForkJoinDispatcher
      throughput = 100
      dedicated-thread-pool {
        thread-count = 3
        deadlock-timeout = 3s
        threadtype = background
      }
    }
  }

  default-mailbox {
    # FQCN of the MailboxType. The Class of the FQCN must have a public
    # constructor with
    # (akka.actor.ActorSystem.Settings, com.typesafe.config.Config) parameters.
    mailbox-type = "akka.dispatch.UnboundedMailbox"

    # If the mailbox is bounded then it uses this setting to determine its
    # capacity. The provided value must be positive.
    # NOTICE:
    # Up to version 2.1 the mailbox type was determined based on this setting;
    # this is no longer the case, the type must explicitly be a bounded mailbox.
    mailbox-capacity = 1000

    # If the mailbox is bounded then this is the timeout for enqueueing
    # in case the mailbox is full. Negative values signify infinite
    # timeout, which should be avoided as it bears the risk of dead-lock.
    mailbox-push-timeout-time = 10s

    # For Actor with Stash: The default capacity of the stash.
    # If negative (or zero) then an unbounded stash is used (default)
    # If positive then a bounded stash is used and the capacity is set using
    # the property
    stash-capacity = -1
  }

  remote {
    # The port clients should connect to. Default is 2552.
    netty.tcp.port = 4711
  }
}

